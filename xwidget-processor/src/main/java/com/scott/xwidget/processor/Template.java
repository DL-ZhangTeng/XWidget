package com.scott.xwidget.processor;

class Template {
    public static StringBuilder template = new StringBuilder();
    static {
        template.append("package com.scott.xwidget.parser;\n");
        template.append("\n");
        template.append("import android.content.Context;\n");
        template.append("import android.content.res.TypedArray;\n");
        template.append("import android.graphics.Color;\n");
        template.append("import android.graphics.drawable.Drawable;\n");
        template.append("import android.graphics.drawable.GradientDrawable;\n");
        template.append("import android.graphics.drawable.StateListDrawable;\n");
        template.append("import android.util.AttributeSet;\n");
        template.append("\n");
        template.append("import androidx.annotation.DrawableRes;\n");
        template.append("\n");
        template.append("import org.jetbrains.annotations.NotNull;\n");
        template.append("import org.jetbrains.annotations.Nullable;\n");
        template.append("\n");
        template.append("import com.scott.xwidget.IWidgetParser;\n");
        template.append("import com.scott.xwidget.R;\n");
        template.append("import com.scott.xwidget.drawable.BlurDrawableRender;\n");
        template.append("import com.scott.xwidget.drawable.GradientDrawableDecorator;\n");
        template.append("import com.scott.xwidget.drawable.ShadowDrawableRender;\n");
        template.append("import com.scott.xwidget.utils.ParseUtils;\n");
        template.append("\n");
        template.append("\n");
        template.append("public class XViewParserTemplate implements IWidgetParser {\n");
        template.append("    public XViewParserTemplate () {\n");
        template.append("    }\n");
        template.append("\n");
        template.append("    @Nullable\n");
        template.append("    @Override\n");
        template.append("    public Drawable parseDrawable(@NotNull Context context, @Nullable AttributeSet attrs, @Nullable Drawable drawable) {\n");
        template.append("        TypedArray arr = context.getResources().obtainAttributes(attrs, R.styleable.XTextViewCustom);\n");
        template.append("        // 是否是selector\n");
        template.append("        int type = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_state, 0);\n");
        template.append("\n");
        template.append("        // 是否使用已有drawable\n");
        template.append("        Drawable drb = null;\n");
        template.append("        if (drawable instanceof GradientDrawable) {\n");
        template.append("            drb = parseGradientDrawable((GradientDrawable) drawable, arr);\n");
        template.append("        } else if (drawable instanceof StateListDrawable) {\n");
        template.append("            drb = parseStateListDrawable((StateListDrawable) drawable, arr, type);\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        if (drb == null) {\n");
        template.append("            // 非selector类型\n");
        template.append("            if (type == 0) {\n");
        template.append("                drb = parseGradientDrawable(new GradientDrawableDecorator(), arr);\n");
        template.append("            } else {\n");
        template.append("                drb = parseStateListDrawable(new StateListDrawable(), arr, type);\n");
        template.append("            }\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        arr.recycle();\n");
        template.append("        return drb;\n");
        template.append("    }\n");
        template.append("\n");
        template.append("    private Drawable parseGradientDrawable(GradientDrawable gradientDrawable, TypedArray arr) {\n");
        template.append("        return buildNormalGradientDrawable(gradientDrawable, arr);\n");
        template.append("    }\n");
        template.append("\n");
        template.append("    private GradientDrawable buildStatedGradientDrawable(GradientDrawableDecorator gradientDrawable, TypedArray arr) {\n");
        template.append("        // 触发态下的填充颜色\n");
        template.append("        int statedSoldColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_stated_solid_color, Color.TRANSPARENT);\n");
        template.append("        if (statedSoldColor == Color.TRANSPARENT) {\n");
        template.append("            statedSoldColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_solid_color, Color.TRANSPARENT);\n");
        template.append("        }\n");
        template.append("        float statedCorner = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_stated_corner, 0F);\n");
        template.append("        if (statedCorner == 0) {\n");
        template.append("            statedCorner = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_corner, 0F);\n");
        template.append("        }\n");
        template.append("        float statedBorder = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_stated_stroke_border, 0F);\n");
        template.append("        if (statedBorder == 0) {\n");
        template.append("            statedBorder = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_stroke_border, 0F);\n");
        template.append("        }\n");
        template.append("        int statedBorderColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_stated_stroke_color, Color.TRANSPARENT);\n");
        template.append("        if (statedBorderColor != Color.TRANSPARENT) {\n");
        template.append("            statedBorderColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_stroke_color, Color.TRANSPARENT);\n");
        template.append("        }\n");
        template.append("        float statedGradientRadius = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_stated_gradient_radius, 0F);\n");
        template.append("        int statedStartColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_stated_gradient_start_color, Color.TRANSPARENT);\n");
        template.append("        int statedCenterColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_stated_gradient_center_color, Color.TRANSPARENT);\n");
        template.append("        int statedEndColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_stated_gradient_end_color, Color.TRANSPARENT);\n");
        template.append("        int statedGradientType = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_stated_solid_gradient, 0);\n");
        template.append("        int statedGradientOrientation = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_stated_gradient_orientation, 0);\n");
        template.append("        GradientDrawable.Orientation gradientOrientation = GradientDrawable.Orientation.LEFT_RIGHT;\n");
        template.append("        switch (statedGradientOrientation) {\n");
        template.append("            case 1:\n");
        template.append("                gradientOrientation = GradientDrawable.Orientation.LEFT_RIGHT;\n");
        template.append("                break;\n");
        template.append("            case 2:\n");
        template.append("                gradientOrientation = GradientDrawable.Orientation.TOP_BOTTOM;\n");
        template.append("                break;\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        if (statedSoldColor != Color.TRANSPARENT) {\n");
        template.append("            gradientDrawable.setColor(statedSoldColor);\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        int stateCornerType = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_stated_corner_type, 0);\n");
        template.append("        if (statedCorner != 0) {\n");
        template.append("            if (stateCornerType == 0) {\n");
        template.append("                gradientDrawable.setCornerRadius(statedCorner);\n");
        template.append("            } else {\n");
        template.append("                gradientDrawable.setCornerRadii(ParseUtils.INSTANCE.getCornersByType(stateCornerType, statedCorner));\n");
        template.append("            }\n");
        template.append("        }\n");
        template.append("        if (statedBorder != 0 && statedBorderColor != 0) {\n");
        template.append("            gradientDrawable.setStroke((int) statedBorder, statedBorderColor);\n");
        template.append("        }\n");
        template.append("        if (statedGradientRadius != 0) {\n");
        template.append("            gradientDrawable.setGradientRadius(statedGradientRadius);\n");
        template.append("        }\n");
        template.append("        if (statedStartColor != Color.TRANSPARENT && statedEndColor != Color.TRANSPARENT) {\n");
        template.append("            // 如果只设置了渐变开始和渐变结束，则不使用渐变中心色值\n");
        template.append("            if (statedCenterColor == Color.TRANSPARENT) {\n");
        template.append("                gradientDrawable.setColors(new int[]{statedStartColor, statedEndColor});\n");
        template.append("            } else {\n");
        template.append("                gradientDrawable.setColors(new int[]{statedStartColor, statedCenterColor, statedEndColor});\n");
        template.append("            }\n");
        template.append("        }\n");
        template.append("        if (statedGradientType != 0) {\n");
        template.append("            gradientDrawable.setGradientType(statedGradientType);\n");
        template.append("        }\n");
        template.append("        if (gradientDrawable.getOrientation() != gradientOrientation) {\n");
        template.append("            gradientDrawable.setOrientation(gradientOrientation);\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        float shadowRadius = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_stated_shadow_radius, 0f);\n");
        template.append("        int shadowColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_stated_shadow_color, 0);\n");
        template.append("        float shadowDx = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_stated_shadow_dx, 0f);\n");
        template.append("        float shadowDy = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_stated_shadow_dx, 0f);\n");
        template.append("        if (shadowRadius == 0) {\n");
        template.append("            shadowRadius = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_shadow_radius, 0);\n");
        template.append("        }\n");
        template.append("        if (shadowColor == 0) {\n");
        template.append("            shadowColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_shadow_color, 0);\n");
        template.append("        }\n");
        template.append("        if (shadowDx == 0) {\n");
        template.append("            shadowDx = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_shadow_dx, 0f);\n");
        template.append("        }\n");
        template.append("        if (shadowDy == 0) {\n");
        template.append("            shadowDy = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_shadow_dy, 0f);\n");
        template.append("        }\n");
        template.append("        if (shadowRadius != 0) {\n");
        template.append("            gradientDrawable.addRender(new ShadowDrawableRender(shadowColor, statedCorner, (int) shadowRadius, shadowDx, shadowDy, stateCornerType, statedSoldColor));\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        // 模糊效果\n");
        template.append("        // 模糊半径\n");
        template.append("        float blurRadius = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_stated_blur_radius, 0f);\n");
        template.append("        if (blurRadius == 0) {\n");
        template.append("            blurRadius = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_blur_radius, 0f);\n");
        template.append("        }\n");
        template.append("        // 模糊颜色\n");
        template.append("        int blurColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_stated_blur_color, 0);\n");
        template.append("        if (blurColor == 0) {\n");
        template.append("            blurColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_blur_color, 0);\n");
        template.append("        }\n");
        template.append("        // 模糊类型\n");
        template.append("        int blurType = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_stated_blur_type, 0);\n");
        template.append("        if (blurType == 0) {\n");
        template.append("            blurType = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_blur_type, 0);\n");
        template.append("        }\n");
        template.append("        if (blurRadius != 0) {\n");
        template.append("            gradientDrawable.addRender(new BlurDrawableRender(blurColor, blurType, statedCorner, (int) blurRadius, stateCornerType));\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        return gradientDrawable;\n");
        template.append("    }\n");
        template.append("\n");
        template.append("    private GradientDrawable buildNormalGradientDrawable(GradientDrawable gradientDrawable, TypedArray arr) {\n");
        template.append("        // 填充色\n");
        template.append("        int statedSoldColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_solid_color, Color.TRANSPARENT);\n");
        template.append("        // 角度\n");
        template.append("        float statedCorner = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_corner, 0F);\n");
        template.append("        // 描边的宽度\n");
        template.append("        float statedBorder = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_stroke_border, 0F);\n");
        template.append("        // 描边颜色\n");
        template.append("        int statedBorderColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_stroke_color, Color.TRANSPARENT);\n");
        template.append("        // 渐变填充的角度\n");
        template.append("        float statedGradientRadius = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_gradient_radius, 0F);\n");
        template.append("        // 渐变开始颜色\n");
        template.append("        int statedStartColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_gradient_start_color, Color.TRANSPARENT);\n");
        template.append("        int statedCenterColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_gradient_center_color, Color.TRANSPARENT);\n");
        template.append("        int statedEndColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_gradient_end_color, Color.TRANSPARENT);\n");
        template.append("        int statedGradientType = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_solid_gradient, 0);\n");
        template.append("        int statedGradientOrientation = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_gradient_orientation, 0);\n");
        template.append("        GradientDrawable.Orientation gradientOrientation = GradientDrawable.Orientation.LEFT_RIGHT;\n");
        template.append("        switch (statedGradientOrientation) {\n");
        template.append("            case 1:\n");
        template.append("                gradientOrientation = GradientDrawable.Orientation.LEFT_RIGHT;\n");
        template.append("                break;\n");
        template.append("            case 2:\n");
        template.append("                gradientOrientation = GradientDrawable.Orientation.TOP_BOTTOM;\n");
        template.append("                break;\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        int stateCornerType = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_corner_type, 0);\n");
        template.append("        if (stateCornerType == 0) {\n");
        template.append("            gradientDrawable.setCornerRadius(statedCorner);\n");
        template.append("        } else {\n");
        template.append("            gradientDrawable.setCornerRadii(ParseUtils.INSTANCE.getCornersByType(stateCornerType, statedCorner));\n");
        template.append("         }\n");
        template.append("        gradientDrawable.setColor(statedSoldColor);\n");
        template.append("        gradientDrawable.setStroke((int) statedBorder, statedBorderColor);\n");
        template.append("        gradientDrawable.setGradientRadius(statedGradientRadius);\n");
        template.append("        // 如果只设置了渐变开始和渐变结束，则不使用渐变中心色值\n");
        template.append("        if (statedStartColor != Color.TRANSPARENT && statedEndColor != Color.TRANSPARENT) {\n");
        template.append("            if (statedCenterColor == Color.TRANSPARENT) {\n");
        template.append("                gradientDrawable.setColors(new int[]{statedStartColor, statedEndColor});\n");
        template.append("            } else {\n");
        template.append("                gradientDrawable.setColors(new int[]{statedStartColor, statedCenterColor, statedEndColor});\n");
        template.append("            }\n");
        template.append("        }\n");
        template.append("        gradientDrawable.setGradientType(statedGradientType);\n");
        template.append("        gradientDrawable.setOrientation(gradientOrientation);\n");
        template.append("\n");
        template.append("        if (gradientDrawable instanceof GradientDrawableDecorator) {\n");
        template.append("            GradientDrawableDecorator decorator = (GradientDrawableDecorator) gradientDrawable;\n");
        template.append("            float shadowRadius = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_shadow_radius, 0f);\n");
        template.append("            // 渲染阴影\n");
        template.append("            if (shadowRadius != 0) {\n");
        template.append("                int shadowColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_shadow_color, 0);\n");
        template.append("                float shadowDx = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_shadow_dx, 0f);\n");
        template.append("                float shadowDy = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_shadow_dy, 0f);\n");
        template.append("                decorator.addRender(new ShadowDrawableRender(shadowColor, statedCorner, (int) shadowRadius, shadowDx, shadowDy, stateCornerType, statedSoldColor));\n");
        template.append("            }\n");
        template.append("\n");
        template.append("            // 渲染模糊\n");
        template.append("            float blurRadius = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_blur_radius, 0f);\n");
        template.append("            if (blurRadius != 0) {\n");
        template.append("                int blurColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_blur_color, 0);\n");
        template.append("                int blurType = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_blur_type, 0);\n");
        template.append("                decorator.addRender(new BlurDrawableRender(blurColor, blurType, statedCorner, (int) blurRadius, stateCornerType));\n");
        template.append("            }\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        return gradientDrawable;\n");
        template.append("    }\n");
        template.append("\n");
        template.append("    private Drawable parseStateListDrawable(StateListDrawable stateListDrawable, TypedArray arr, int stateType) {\n");
        template.append("        GradientDrawable normaDrawable = buildNormalGradientDrawable(new GradientDrawableDecorator(), arr);\n");
        template.append("        // 如果不是selector, 直接返回\n");
        template.append("        if (stateType == 0)\n");
        template.append("            return normaDrawable;\n");
        template.append("\n");
        template.append("        int[] state_arr = null;\n");
        template.append("        int[] state_normal = null;\n");
        template.append("\n");
        template.append("        if (stateType == 1) {\n");
        template.append("            state_arr = new int[] {android.R.attr.state_pressed};\n");
        template.append("            state_normal = new int[] {-android.R.attr.state_pressed};\n");
        template.append("        } else if (stateType == 2) {\n");
        template.append("            state_arr = new int[] {android.R.attr.state_selected};\n");
        template.append("            state_normal = new int[] {-android.R.attr.state_selected};\n");
        template.append("        } else if (stateType == 3) {\n");
        template.append("            state_arr = new int[] {android.R.attr.state_checked};\n");
        template.append("            state_normal = new int[] {-android.R.attr.state_checked};\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        // 如果指定了俩个drawable 用于切换，直接使用\n");
        template.append("        Drawable customDrawableDefault = arr.getDrawable(R.styleable.XTextViewCustom_XTextViewCustom_drawable);\n");
        template.append("        Drawable customStateDrawable = arr.getDrawable(R.styleable.XTextViewCustom_XTextViewCustom_stated_drawable);\n");
        template.append("        if (customDrawableDefault != null && customStateDrawable != null) {\n");
        template.append("            stateListDrawable.addState(state_arr, customStateDrawable);\n");
        template.append("            stateListDrawable.addState(state_normal, customDrawableDefault);\n");
        template.append("            return stateListDrawable;\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        // 从默认的drawable继承属性或者扩展\n");
        template.append("        GradientDrawable statedDrawable = buildStatedGradientDrawable((GradientDrawableDecorator) buildNormalGradientDrawable(new GradientDrawableDecorator(), arr), arr);\n");
        template.append("        stateListDrawable.addState(state_arr, statedDrawable);\n");
        template.append("        stateListDrawable.addState(state_normal, normaDrawable);\n");
        template.append("        return stateListDrawable;\n");
        template.append("    }\n");
        template.append("}\n");
    }
}
