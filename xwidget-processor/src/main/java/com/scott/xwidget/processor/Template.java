package com.scott.xwidget.processor;

class Template {
    public static StringBuilder template = new StringBuilder();
    static {
        template.append("package com.scott.xwidget.parser;\n");
        template.append("\n");
        template.append("import android.content.Context;\n");
        template.append("import android.content.res.TypedArray;\n");
        template.append("import android.graphics.Color;\n");
        template.append("import android.graphics.drawable.Drawable;\n");
        template.append("import android.graphics.drawable.GradientDrawable;\n");
        template.append("import android.graphics.drawable.StateListDrawable;\n");
        template.append("import android.util.AttributeSet;\n");
        template.append("import org.jetbrains.annotations.NotNull;\n");
        template.append("import org.jetbrains.annotations.Nullable;\n");
        template.append("\n");
        template.append("import com.scott.xwidget.IWidgetParser;\n");
        template.append("import com.scott.xwidget.R;\n");
        template.append("\n");
        template.append("\n");
        template.append("public class XViewParserTemplate implements IWidgetParser {\n");
        template.append("    public XViewParserTemplate () {\n");
        template.append("    }\n");
        template.append("\n");
        template.append("    @Nullable\n");
        template.append("    @Override\n");
        template.append("    public Drawable parseDrawable(@NotNull Context context, @Nullable AttributeSet attrs, @Nullable Drawable drawable) {\n");
        template.append("        TypedArray arr = context.getResources().obtainAttributes(attrs, R.styleable.XTextViewCustom);\n");
        template.append("        int type = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_state, 0);\n");
        template.append("\n");
        template.append("        Drawable drb = null;\n");
        template.append("        if (drawable instanceof GradientDrawable) {\n");
        template.append("            drb = parseGradientDrawable((GradientDrawable) drawable, arr);\n");
        template.append("        } else if (drawable instanceof StateListDrawable) {\n");
        template.append("            drb = parseStateListDrawable((StateListDrawable) drawable, arr, type);\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        if (drb == null) {\n");
        template.append("            if (type == 0) {\n");
        template.append("                drb = parseGradientDrawable(new GradientDrawable(), arr);\n");
        template.append("            } else if (type == 1) {\n");
        template.append("                drb = parseStateListDrawable(new StateListDrawable(), arr, type);\n");
        template.append("            }\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        arr.recycle();\n");
        template.append("        return drb;\n");
        template.append("    }\n");
        template.append("\n");
        template.append("    private Drawable parseGradientDrawable(GradientDrawable gradientDrawable, TypedArray arr) {\n");
        template.append("        return buildNormalGradientDrawable(gradientDrawable, arr);\n");
        template.append("    }\n");
        template.append("\n");
        template.append("    private GradientDrawable buildStatedGradientDrawable(GradientDrawable gradientDrawable, TypedArray arr) {\n");
        template.append("        int statedSoldColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_stated_solid_color, Color.TRANSPARENT);\n");
        template.append("        float statedCorner = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_stated_corner, 0F);\n");
        template.append("        float statedBorder = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_stated_stroke_border, 0F);\n");
        template.append("        int statedBorderColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_stated_stroke_color, Color.TRANSPARENT);\n");
        template.append("        float statedGradientRadius = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_stated_gradient_radius, 0F);\n");
        template.append("        int statedStartColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_stated_gradient_start_color, Color.TRANSPARENT);\n");
        template.append("        int statedEndColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_stated_gradient_end_color, Color.TRANSPARENT);\n");
        template.append("        int statedGradientType = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_stated_solid_gradient, 0);\n");
        template.append("        int statedGradientOrientation = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_stated_gradient_orientation, 0);\n");
        template.append("        GradientDrawable.Orientation gradientOrientation = GradientDrawable.Orientation.LEFT_RIGHT;\n");
        template.append("        switch (statedGradientOrientation) {\n");
        template.append("            case 1:\n");
        template.append("                gradientOrientation = GradientDrawable.Orientation.LEFT_RIGHT;\n");
        template.append("                break;\n");
        template.append("            case 2:\n");
        template.append("                gradientOrientation = GradientDrawable.Orientation.TOP_BOTTOM;\n");
        template.append("                break;\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        if (statedSoldColor != Color.TRANSPARENT) {\n");
        template.append("            gradientDrawable.setColor(statedSoldColor);\n");
        template.append("        }\n");
        template.append("        if (statedCorner != 0) {\n");
        template.append("            int stateCornerType = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_stated_corner_type, 0);\n");
        template.append("            if (stateCornerType == 0) {\n");
        template.append("                gradientDrawable.setCornerRadius(statedCorner);\n");
        template.append("            } else {\n");
        template.append("                float[] corners = new float[] {0, 0, 0, 0, 0, 0, 0, 0};\n");
        template.append("                if ((stateCornerType & 0x01) == 0x01) { // top-left\n");
        template.append("                    corners[0] = statedCorner;\n");
        template.append("                    corners[1] = statedCorner;\n");
        template.append("                }\n");
        template.append("                if ((stateCornerType & 0x08) == 0x8) { // top-right\n");
        template.append("                    corners[2] = statedCorner;\n");
        template.append("                    corners[3] = statedCorner;\n");
        template.append("                }\n");
        template.append("                if ((stateCornerType & 0x16) == 0x16) { // bottom-right\n");
        template.append("                    corners[6] = statedCorner;\n");
        template.append("                    corners[7] = statedCorner;\n");
        template.append("                }\n");
        template.append("                if ((stateCornerType & 0x32) == 0x32) { // bottom-left\n");
        template.append("                    corners[4] = statedCorner;\n");
        template.append("                    corners[5] = statedCorner;\n");
        template.append("                }\n");
        template.append("                gradientDrawable.setCornerRadii(corners);\n");
        template.append("            }\n");
        template.append("        }\n");
        template.append("        if (statedBorder != 0 && statedBorderColor != 0) {\n");
        template.append("            gradientDrawable.setStroke((int) statedBorder, statedBorderColor);\n");
        template.append("        }\n");
        template.append("        if (statedGradientRadius != 0) {\n");
        template.append("            gradientDrawable.setGradientRadius(statedGradientRadius);\n");
        template.append("        }\n");
        template.append("        if (statedStartColor != Color.TRANSPARENT && statedEndColor != Color.TRANSPARENT) {\n");
        template.append("            gradientDrawable.setColors(new int[] {statedStartColor, statedEndColor});\n");
        template.append("        }\n");
        template.append("        if (statedGradientType != 0) {\n");
        template.append("            gradientDrawable.setGradientType(statedGradientType);\n");
        template.append("        }\n");
        template.append("        if (gradientDrawable.getOrientation() != gradientOrientation) {\n");
        template.append("            gradientDrawable.setOrientation(gradientOrientation);\n");
        template.append("        }\n");
        template.append("        return gradientDrawable;\n");
        template.append("    }\n");
        template.append("\n");
        template.append("    private GradientDrawable buildNormalGradientDrawable(GradientDrawable gradientDrawable, TypedArray arr) {\n");
        template.append("        int statedSoldColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_solid_color, Color.TRANSPARENT);\n");
        template.append("        float statedCorner = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_corner, 0F);\n");
        template.append("        float statedBorder = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_stroke_border, 0F);\n");
        template.append("        int statedBorderColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_stroke_color, Color.TRANSPARENT);\n");
        template.append("        float statedGradientRadius = arr.getDimension(R.styleable.XTextViewCustom_XTextViewCustom_gradient_radius, 0F);\n");
        template.append("        int statedStartColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_gradient_start_color, Color.TRANSPARENT);\n");
        template.append("        int statedEndColor = arr.getColor(R.styleable.XTextViewCustom_XTextViewCustom_gradient_end_color, Color.TRANSPARENT);\n");
        template.append("        int statedGradientType = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_solid_gradient, 0);\n");
        template.append("        int statedGradientOrientation = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_gradient_orientation, 0);\n");
        template.append("        GradientDrawable.Orientation gradientOrientation = GradientDrawable.Orientation.LEFT_RIGHT;\n");
        template.append("        switch (statedGradientOrientation) {\n");
        template.append("            case 1:\n");
        template.append("                gradientOrientation = GradientDrawable.Orientation.LEFT_RIGHT;\n");
        template.append("                break;\n");
        template.append("            case 2:\n");
        template.append("                gradientOrientation = GradientDrawable.Orientation.TOP_BOTTOM;\n");
        template.append("                break;\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        int stateCornerType = arr.getInt(R.styleable.XTextViewCustom_XTextViewCustom_corner_type, 0);\n");
        template.append("        if (stateCornerType == 0) {\n");
        template.append("            gradientDrawable.setCornerRadius(statedCorner);\n");
        template.append("        } else {\n");
        template.append("            float[] corners = new float[] {0, 0, 0, 0, 0, 0, 0, 0};\n");
        template.append("            if ((stateCornerType & 0x01) == 0x01) { // top-left\n");
        template.append("                corners[0] = statedCorner;\n");
        template.append("                corners[1] = statedCorner;\n");
        template.append("            }\n");
        template.append("            if ((stateCornerType & 0x08) == 0x8) { // top-right\n");
        template.append("                corners[2] = statedCorner;\n");
        template.append("                corners[3] = statedCorner;\n");
        template.append("            }\n");
        template.append("            if ((stateCornerType & 0x16) == 0x16) { // bottom-right\n");
        template.append("                corners[6] = statedCorner;\n");
        template.append("                corners[7] = statedCorner;\n");
        template.append("            }\n");
        template.append("            if ((stateCornerType & 0x32) == 0x32) { // bottom-left\n");
        template.append("                corners[4] = statedCorner;\n");
        template.append("                corners[5] = statedCorner;\n");
        template.append("            }\n");
        template.append("            gradientDrawable.setCornerRadii(corners);\n");
        template.append("         }\n");
        template.append("        gradientDrawable.setColor(statedSoldColor);\n");
        template.append("        gradientDrawable.setStroke((int) statedBorder, statedBorderColor);\n");
        template.append("        gradientDrawable.setGradientRadius(statedGradientRadius);\n");
        template.append("        if (statedStartColor != Color.TRANSPARENT && statedEndColor != Color.TRANSPARENT) {\n");
        template.append("            gradientDrawable.setColors(new int[] {statedStartColor, statedEndColor});\n");
        template.append("        }\n");
        template.append("        gradientDrawable.setGradientType(statedGradientType);\n");
        template.append("        gradientDrawable.setOrientation(gradientOrientation);\n");
        template.append("        return gradientDrawable;\n");
        template.append("    }\n");
        template.append("\n");
        template.append("    private Drawable parseStateListDrawable(StateListDrawable stateListDrawable, TypedArray arr, int stateType) {\n");
        template.append("        GradientDrawable normaDrawable = buildNormalGradientDrawable(new GradientDrawable(), arr);\n");
        template.append("        if (stateType == 0)\n");
        template.append("            return normaDrawable;\n");
        template.append("\n");
        template.append("        int[] state_arr = null;\n");
        template.append("        int[] state_normal = null;\n");
        template.append("\n");
        template.append("\n");
        template.append("        if (stateType == 1) {\n");
        template.append("            state_arr = new int[] {android.R.attr.state_pressed};\n");
        template.append("            state_normal = new int[] {-android.R.attr.state_pressed};\n");
        template.append("        } else if (stateType == 2) {\n");
        template.append("            state_arr = new int[] {android.R.attr.state_selected};\n");
        template.append("            state_normal = new int[] {-android.R.attr.state_selected};\n");
        template.append("        } else if (stateType == 3) {\n");
        template.append("            state_arr = new int[] {android.R.attr.state_checked};\n");
        template.append("            state_normal = new int[] {-android.R.attr.state_checked};\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        GradientDrawable statedDrawable = buildStatedGradientDrawable(buildNormalGradientDrawable(new GradientDrawable(), arr), arr);\n");
        template.append("        stateListDrawable.addState(state_arr, statedDrawable);\n");
        template.append("        stateListDrawable.addState(state_normal, normaDrawable);\n");
        template.append("        return stateListDrawable;\n");
        template.append("    }\n");
        template.append("}\n");
    }
}
